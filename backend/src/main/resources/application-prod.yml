spring:
  application:
    name: finance-monkey
  
  # Database connection settings
  datasource:
    # These settings help with connection issues in cloud environments
    hikari:
      # Connection timeout for DNS resolution issues
      connection-timeout: 60000
      maximum-pool-size: 5
      minimum-idle: 1
      # Don't fail initialization forever
      initialization-fail-timeout: -1
      # Continue trying to acquire connection
      keepalive-time: 120000
      # Only validate once every 10 seconds to reduce load
      validation-timeout: 10000
      # Connection test query
      connection-test-query: SELECT 1
    
    # Use the DATABASE_URL environment variable from Render
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/financemonkey}
    driver-class-name: org.postgresql.Driver
    
  # Configuration for managing DNS resolution issues in cloud environments
  cloud:
    # Render-specific settings
    render:
      # Allow more time for DNS resolution
      connection-timeout: 60000
  
  # Make application more tolerant to failures
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        # Set to true to show generated SQL in development
        show_sql: false
        # Configure connection retry
        connection.provider_disables_autocommit: false
        # Defer data source initialization
        connection.handling_mode: DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT
        # JDBC connection settings
        connection.autoReconnect: true
        connection.characterEncoding: utf8
        connection.useUnicode: true
    # Don't fail on startup if database is not available
    open-in-view: false
    
  # Flyway migration configuration - will be enabled after successful database connection
  flyway:
    # Disable automatic migration at startup
    enabled: false
    baseline-on-migrate: true
    locations: classpath:db/migration
    
# Application-specific configuration
app:
  # Database resilience configuration
  database:
    # Enable resilient mode to allow application to start without database
    resilient-mode: true
    # Use manual data source initialization with retry logic
    manual-datasource-init: false
    # Retry configuration
    retry:
      max-attempts: 5
      initial-interval: 1000
      multiplier: 2
      max-interval: 30000
  flyway:
    enabled: false  # Disable Flyway initially and enable it programmatically when DB is available
    baseline-on-migrate: true
    # Add connection retry
    connect-retries: 10
    connect-retries-interval: 5s
    # Don't fail on startup if migration fails
    fail-on-missing-locations: false
    # Don't validate on migrate to avoid connection issues
    validate-on-migrate: false
    
  # Auto-configuration settings - allow Spring Boot to manage datasource
  autoconfigure:
    exclude:
      # No exclusions - let Spring Boot handle auto-configuration

server:
  port: ${PORT:10000}
  servlet:
    context-path: /api

security:
  jwt:
    token:
      secret-key: ${JWT_SECRET}
      expire-length: 3600000 # 1 hour in milliseconds

email:
  processing:
    schedule: "0 */30 * * * *" # Every 30 minutes
    batch-size: 50
    max-retries: 3

gemini:
  api:
    key: ${GEMINI_API_KEY}
  project: ${GEMINI_PROJECT:finance-monkey}
  location: ${GEMINI_LOCATION:us-central1}

google:
  oauth:
    client-id: ${GOOGLE_CLIENT_ID}
    client-secret: ${GOOGLE_CLIENT_SECRET}
    redirect-uri: ${GOOGLE_REDIRECT_URI}

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: when_authorized
      
logging:
  level:
    org.springframework.security: WARN
    com.financeMonkey: INFO
  file:
    name: /var/log/finance-monkey.log
